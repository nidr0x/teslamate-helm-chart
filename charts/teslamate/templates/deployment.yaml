apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "teslamate.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "teslamate.name" . }}
    helm.sh/chart: {{ include "teslamate.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "teslamate.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "teslamate.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion | trimPrefix "v" }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- if (default false .Values.customPostgreSQL.enabled) }}
            - name: DATABASE_HOST
              value: {{  required "customPostgreSQL.host is required" .Values.customPostgreSQL.host | quote }}
            {{- end }}
            {{- if .Values.customPostgreSQL.user }}
            - name: DATABASE_USER
              value: {{  required "customPostgreSQL.user is required" .Values.customPostgreSQL.user | quote }}
            {{- end }}
            {{- if .Values.customPostgreSQL.password }}
            - name: DATABASE_PASS
              value: {{  required "customPostgreSQL.password is required" .Values.customPostgreSQL.password | quote }}
            {{- end }}
            {{- if .Values.customPostgreSQL.database }}
            - name: DATABASE_NAME
              value: {{  required "customPostgreSQL.database is required" .Values.customPostgreSQL.database | quote }}
            {{- end }}
            {{- if .Values.mqtt.enabled }}
            - name: MQTT_HOST
              value: {{ .Values.mqtt.host | quote }}
            - name: MQTT_USERNAME
              value: {{ .Values.mqtt.username | quote }}
            - name: MQTT_PASSWORD
              value: {{ .Values.mqtt.password | quote }}
            - name: MQTT_TLS
              value: {{ .Values.mqtt.tls | quote }}
            - name: MQTT_TLS_ACCEPT_INVALID_CERTS
              value: {{ .Values.mqtt.tlsAcceptInvalidCerts | quote }}
            {{- else }}
            - name: DISABLE_MQTT
              value: "true"
            {{- end }}
            {{- if .Values.timeZone }}
            - name: TZ
              value: {{ .Values.timeZone | quote }}
            {{- end }}
            {{- if .Values.checkOrigin }}
            - name: CHECK_ORIGIN
              value: {{ .Values.checkOrigin | quote }}
            {{- end }}
            {{- if .Values.virtualHost }}
            - name: VIRTUAL_HOST
              value: {{ required "virtualHost is required"  .Values.virtualHost | quote }}
            {{- end }}
            {{- if .Values.locale }}
            - name: LOCALE
              value: {{ .Values.locale | quote }}
            {{- end }}
            {{- range $key, $value := .Values.env }}
            - name: "{{ tpl $key $ }}"
              value: "{{ tpl (print $value) $ }}"
            {{- end }}
          {{- if or .Values.envFromSecrets .Values.envFromConfigMaps }}
          envFrom:
            {{- if .Values.customPostgreSQL.enabled }}
            {{- if .Values.customPostgreSQL.secretName }}
            - secretRef:
                name: {{ .Values.customPostgreSQL.secretName | quote }}
                optional: false
            {{- end }}
            {{- end }}
            {{- range .Values.envFromSecrets }}
            - secretRef:
                name: {{ tpl .name $ }}
                optional: {{ .optional | default false }}
            {{- end }}
            {{- range .Values.envFromConfigMaps }}
            - configMapRef:
                name: {{ tpl .name $ }}
                optional: {{ .optional | default false }}
            {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort: 4000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          readinessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
